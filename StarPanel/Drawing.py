class Drawing:    def __init__(self):        self.__canvasElementList = []        self.__canvas = None        self.__posList = []        self.__scale = None        self.__starList = []        import threading        self.__lock = threading.Lock()    def InitLayout(self, canvas, starList, originX, originY, scale) :        self.__lock.acquire()        import Vector        import Star        import Tkinter        self.__starList = starList        self.__canvas = canvas        self.__scale = scale        for item in self.__canvasElementList:            canvas.delete(item[0])        self.__canvasElementList = []        for star in starList:            pos = star.getPos()            x = pos.getX()            y = pos.getY()            self.__posList = self.__posList + [x,y]            r = max((star.getR(), 1 / scale))            color = star.getColor()            id = canvas.create_oval(originX + (pos.getX() - r) * scale, \                                  originY + (pos.getY() - r) * scale, \                                  originX + (pos.getX() + r) * scale, \                                  originY + (pos.getY() + r) * scale, \                                  width = 0, fill=color)            self.__canvasElementList.append((id, star ))            self.__lock.release()            def updateLayout(self):        self.__lock.acquire()        import Tkinter        import Vector        import Star        p = []        for num in range(len(self.__canvasElementList)):            star = self.__starList[num]            pos = star.getPos()            x = self.__posList[2*num]            y = self.__posList[2*num + 1]            self.__canvas.move(self.__canvasElementList[num][0],(pos.getX() - x)*self.__scale,(pos.getY() - y)*self.__scale)            p = p + [pos.getX(),pos.getY()]        self.__posList = p        self.__lock.release()